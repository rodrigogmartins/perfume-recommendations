name: CI/CD

on:
  push:
    branches: [main]

jobs:
  test-and-coverage:
    name: Run Tests and Coverage Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests and check coverage
        run: |
          COVERAGE_OUTPUT=$(pytest --cov=src --cov-report=term-missing)
          echo "$COVERAGE_OUTPUT"
          COVERAGE_PERCENT=$(echo "$COVERAGE_OUTPUT" | grep TOTAL | awk '{print $NF}' | sed 's/%//')
          MIN_COVERAGE=70
          if (( $(echo "$COVERAGE_PERCENT < $MIN_COVERAGE" | bc -l) )); then
            echo "❌ Coverage below $MIN_COVERAGE%. Actual: $COVERAGE_PERCENT%"
            exit 1
          else
            echo "✅ Coverage OK: $COVERAGE_PERCENT%"
          fi

  build-and-push-api:
    name: Build & Push API Docker Image
    runs-on: ubuntu-latest
    needs: test-and-coverage
    if: needs.test-and-coverage.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if scripts directory changed
        id: changes
        run: |
          git fetch origin ${{ github.ref_name }} --depth=2
          if git diff --name-only HEAD~1 HEAD | grep '^src/'; then
            echo "✅ Alterações detectadas na pasta src/"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "🟡 Nenhuma alteração detectada na pasta src/"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        if: steps.changes.outputs.changed == 'true'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        if: steps.changes.outputs.changed == 'true'

      - name: Build and push recommendations-api image to ECR
#        if: steps.changes.outputs.changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_RECOMMENDATIONS_API }}
        run: |
          docker build -t $ECR_REPOSITORY -f Dockerfile.api .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-and-push-scritps:
    name: Build & Push Scripts Docker Image
    runs-on: ubuntu-latest
    needs: test-and-coverage
    if: needs.test-and-coverage.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if scripts directory changed
        id: changes
        run: |
          git fetch origin ${{ github.ref_name }} --depth=2
          if git diff --name-only HEAD~1 HEAD | grep '^scripts/'; then
            echo "✅ Alterações detectadas na pasta scripts/"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "🟡 Nenhuma alteração detectada na pasta scripts/"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
#        if: steps.changes.outputs.changed == 'true'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
#        if: steps.changes.outputs.changed == 'true'

      - name: Build and push fill-database-scripts image to ECR
#        if: steps.changes.outputs.changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_FILL_DATABASE_SCRIPTS }}
        run: |
          docker build -t $ECR_REPOSITORY -f Dockerfile.scripts .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest


#  terraform:
#      runs-on: ubuntu-latest
#      needs: [test-and-coverage, build-and-push-api, build-and-push-scritps]
#      if: needs.test-and-coverage.result == 'success'
#
#      steps:
#        - uses: actions/checkout@v3
#
#        - name: Setup Terraform
#          uses: hashicorp/setup-terraform@v2
#          with:
#            terraform_version: 1.5.2
#
#        - name: Terraform Init
#          run: terraform init ./infra
#
#        - name: Terraform Apply
#          env:
#            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#            aws-region: ${{ secrets.AWS_REGION }}
#          run: terraform apply -auto-approve ./infra